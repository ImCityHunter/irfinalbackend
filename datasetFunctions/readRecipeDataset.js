const fs = require('fs');
const path = require('path');

const raw_data_01_path = path.join(__dirname, '../dataset/recipes_raw/recipes_raw_nosource_ar.json');

const raw_data_01 = fs.readFileSync(raw_data_01_path);

const self_tokenizer = require('./tokenizedIngredients');

const mongoDao = require('../mongoDB/dao');

const esMethods = require('../elasticSearchFunctions/elasticFunctions');

const bulkInsert = require('../elasticSearchFunctions/elasticBulkInsert');

function readData(){
	const data_01 = JSON.parse(raw_data_01);
	//console.log(data_01); // checking
	let autoGenerated_id = 0;
	const dishes = [];
	for(const key in data_01){
			const dish = data_01[key];
			const originIngredients = dish.ingredients;
			const originTitle = dish.title;
			const tokenizedTitle = self_tokenizer.tokenizedTitle(dish.title);
			const instructions = dish.instructions;
			const id = autoGenerated_id++;
			const elasticIngredients = self_tokenizer.ingredientsForElasticSearch(originIngredients);
			const customisedIngredients = self_tokenizer.ingredientsForCustomizedSearch(originIngredients); // array of ingredients
			//console.log(elasticIngredients);
			//console.log(customisedIngredients);
			const newDish = {};

			newDish.title = tokenizedTitle;
			newDish.instruction = instructions;
			//newDish._id = id; // for mongo
			newDish._id = id; // for elastic
			newDish.ingredients = elasticIngredients;

			putData(newDish).then(()=>{});



			let defaultString = { "index":{"_index":"dish","_id":id.toString()}};
			let dataObj = {"title":newDish.title,"ingredients":elasticIngredients};
			dishes.push(defaultString,dataObj);



	}
	//console.log('attempting to run run '+dishes.length);
	bulkInsert.bulkInsert(dishes).then(()=>{
		console.log(dishes.length/2, 'data has been stored');
		console.log('Bulk Insert Success')}).catch(e=>{console.log(e)});
}


async function putData(dish){

	try{
		await mongoDao.insertData(dish);
	}
	catch(e){
		console.log(e);
		console.log('error in inserting data 105');
	}


}



module.exports = {
    readData
}

